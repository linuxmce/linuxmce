#! /bin/sh /usr/share/dpatch/dpatch-run
## 82_valgrind.dpatch by Tobias Grimm <tg@e-tobi.net>
##
## Thomas Günther <tom@toms-cafe.de>:
##   - adapted to VDR-1.7.4
##   - adapted to VDR-1.7.11
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: In order to allow valgrind to find memory leaks in VDR plugins, VDR
## DP: must not unload the plugin libraries when shutting down. This
## DP: patch adds a new option -k / --keep-plugins (which is only available
## DP: in the debug build) to disable plugin unloading.

@DPATCH@
--- vdr-1.7.11/plugin.c
+++ vdr-1.7.11/plugin.c
@@ -152,6 +152,10 @@ const char *cPlugin::ConfigDirectory(con
 
 // --- cDll ------------------------------------------------------------------
 
+#ifdef VDRDEBUG
+bool cDll::keepPlugins = false;
+#endif
+
 cDll::cDll(const char *FileName, const char *Args)
 {
   fileName = strdup(FileName);
@@ -163,8 +167,16 @@ cDll::cDll(const char *FileName, const c
 cDll::~cDll()
 {
   delete plugin;
+#ifdef VDRDEBUG
+  if (!keepPlugins)
+  {
+    if (handle)
+       dlclose(handle);
+    }
+#else
   if (handle)
      dlclose(handle);
+#endif
   free(args);
   free(fileName);
 }
--- vdr-1.7.11/plugin.h
+++ vdr-1.7.11/plugin.h
@@ -68,6 +68,9 @@ private:
   void *handle;
   cPlugin *plugin;
 public:
+  #ifdef VDRDEBUG
+  static bool keepPlugins;
+  #endif
   cDll(const char *FileName, const char *Args);
   virtual ~cDll();
   bool Load(bool Log = false);
--- vdr-1.7.11/vdr.c
+++ vdr-1.7.11/vdr.c
@@ -226,6 +226,9 @@ int main(int argc, char *argv[])
       { "grab",     required_argument, NULL, 'g' },
       { "help",     no_argument,       NULL, 'h' },
       { "instance", required_argument, NULL, 'i' },
+#ifdef VDRDEBUG
+      { "keep-plugins", no_argument,   NULL, 'k' },
+#endif
       { "lib",      required_argument, NULL, 'L' },
       { "lirc",     optional_argument, NULL, 'l' | 0x100 },
       { "localedir",required_argument, NULL, 'l' | 0x200 },
@@ -248,7 +251,7 @@ int main(int argc, char *argv[])
     };
 
   int c;
-  while ((c = getopt_long(argc, argv, "a:c:dD:e:E:g:hi:l:L:mp:P:r:s:t:u:v:Vw:", long_options, NULL)) != -1) {
+  while ((c = getopt_long(argc, argv, "a:c:dD:e:E:g:hi:kl:L:mp:P:r:s:t:u:v:Vw:", long_options, NULL)) != -1) {
         switch (c) {
           case 'a': AudioCommand = optarg;
                     break;
@@ -282,6 +285,10 @@ int main(int argc, char *argv[])
                        }
                     fprintf(stderr, "vdr: invalid instance id: %s\n", optarg);
                     return 2;
+#ifdef VDRDEBUG
+          case 'k': cDll::keepPlugins = true;
+                    break;
+#endif
           case 'l': {
                       char *p = strchr(optarg, '.');
                       if (p)
@@ -425,6 +432,9 @@ int main(int argc, char *argv[])
                "                           or symlinks (default: none, same as -g-)\n"
                "  -h,       --help         print this help and exit\n"
                "  -i ID,    --instance=ID  use ID as the id of this VDR instance (default: 0)\n"
+#ifdef VDRDEBUG
+               "  -k        --keep-plugins Support valgrind by not unloading plugins\n"
+#endif
                "  -l LEVEL, --log=LEVEL    set log level (default: 3)\n"
                "                           0 = no logging, 1 = errors only,\n"
                "                           2 = errors and info, 3 = errors, info and debug\n"
