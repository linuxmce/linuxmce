#################################################################################################
# wirbelscan - a Plugin for the Video Disc Recorder
# http://wirbel.htpc-forum.de
#
# automatic formatting rules for wirbelscan.
# v 20080919 --wirbel
#######################################################################
# Allgemein
#######################################################################
newlines                      = lf     # Zeilenende, linux = lf, win = crlf (auto/lf/crlf/cr)
input_tab_size                = 2      # die original Größe von Tabs als input
output_tab_size               = 2      # Ausgabegröße von Tabs (für align_with_tabs)
string_escape_char            = 92     # Der ascii Wert des Zeichens zum Escapen von strings, normalerweise #92 '\'
#######################################################################
# Einrückungen
#######################################################################
indent_columns                = 2      # Die Anzahl Spalten je Einrückungslevel
indent_with_tabs              = 0      # Einrückung: 0 = Leerzeichen, 1 = Tab + Ausrichtung mit Leerzeichen, 2 = nur Tab
indent_align_string           = true   # Sollen Strings, die mit '\' umgebrochen wurden, eingerückt werden?
indent_brace                  = 0      # Leerzeichen Einrückung '{' from level, Anzahl
indent_braces                 = true   # Sollen Klammern '{' auf den body level eingerückt werden?
indent_brace_parent           = false  # Einrückung abh. von Namenslänge parent?
indent_namespace              = false  # Whether 'namespace' body is indented false/true
indent_class                  = true   # Whether 'class' body is indented false/true
indent_class_colon            = false  # Whether Einrückung the stuff after a leading class colon false/true
indent_func_call_param        = false  # Einrücken fortgesetzter function call parameter einen Einrückungslevel (true) oder anordnen (false)
indent_member                 = 2      # Anzahl Leerzeichen Einrückung für continued '->' or '.' normalerweise gleich indent_columns.
indent_switch_case            = 3      # Leerzeichen um 'case' in 'switch' Bedingung einzurücken
indent_case_brace             = 0      # Leerzeichen Einrückung '{' from 'case'
indent_col1_comment           = false  # Einrückung Kommentare die in erster Spalte gefunden werden
indent_label                  = 1      # Einrückung goto labels (>0=absolute Spalte wobei 1 = linke Spalte, <=0 = von Klammereinzug abziehen)
indent_paren_nl               = false  # falls '(' gefolgt von Zeilenumbruch, nächste Zeile einrücken (nicht empfohlen)
indent_square_nl              = false  # falls '[' gefolgt von Zeilenumbruch, nächste Zeile einrücken (nicht empfohlen)
#######################################################################
# Leerzeichen
#######################################################################
sp_arith                      = force  # Leerzeichen um arithmetischen Operator '+', '-', '/', '*', etc. (ignore/add/remove/force)
sp_assign                     = force  # Leerzeichen um Zuweisungsoperator '=', '+=', etc. (ignore/add/remove/force)
sp_bool                       = force  # Leerzeichen um boolsche Operatoren '&&' und '||' (ignore/add/remove/force)
sp_compare                    = force  # Leerzeichen um Vergleichsoperatoren '<', '>', '==', etc. (ignore/add/remove/force)
sp_inside_paren               = remove # Leerzeichen innerhalb '(' und ')'  (ignore/add/remove/force)
sp_paren_paren                = remove # Leerzeichen zwischen geschachtelten '(' parens  (ignore/add/remove/force)
sp_paren_brace                = force  # Leerzeichen zwischen ')' und '{'  (ignore/add/remove/force)
sp_before_ptr_star            = force  # Leerzeichen vor Zeiger Operator '*' (ignore/add/remove/force)
sp_between_ptr_star           = remove # Leerzeichen zwischen Zeiger Operatoren '*' (ignore/add/remove/force)
sp_after_ptr_star             = force  # Leerzeichen nach Zeiger Operator '*' (ignore/add/remove/force)
sp_before_byref               = force  # Leerzeichen vor Referenzoperator '&' (ignore/add/remove/force)
sp_after_byref                = remove # Leerzeichen nach Referenzoperator '&' (ignore/add/remove/force)
sp_before_angle               = force  # Leerzeichen vor '<>'
sp_after_angle                = force  # Leerzeichen nach '<>'
sp_before_sparen              = force  # Leerzeichen vor '(' eines 'if', 'for', 'switch', oder 'while' (ignore/add/remove/force)
sp_inside_sparen              = remove # Leerzeichen innerhalb einer if-Bedingung '(' und ')' (ignore/add/remove/force)
sp_after_sparen               = force  # Leerzeichen nach ')' eines 'if', 'for', 'switch', und 'while' (ignore/add/remove/force)
sp_sparen_brace               = force  # Leerzeichen zwischen ')' und '{' eines 'if', 'for', 'switch', und 'while'  (ignore/add/remove/force)
sp_special_semi               = force  # Leerzeichen vor leerem statement ';' eines 'if', 'for' und 'while' (ignore/add/remove/force)
sp_before_semi                = remove # Leerzeichen vor ';' (ignore/add/remove/force)
sp_before_square              = ignore # Leerzeichen vor '[' (außer '[]') (ignore/add/remove/force)
sp_before_squares             = remove # Leerzeichen vor '[]' (ignore/add/remove/force)
sp_inside_square              = remove # Leerzeichen innerhalb '[' und ']' (ignore/add/remove/force)
sp_after_comma                = force  # Leerzeichen nach ',' (ignore/add/remove/force)
sp_after_operator             = force  # Leerzeichen zwischen 'operator' und operator sign (ignore/add/remove/force)
sp_after_cast                 = force  # Leerzeichen nach Typecast (ignore/add/remove/force)
sp_sizeof_paren               = remove # Leerzeichen zwischen 'sizeof' und '(' ignore/add/remove/force
sp_after_tag                  = force  # Leerzeichen nach tag keyword (Pawn) (ignore/add/remove/force)
sp_inside_braces_enum         = force  # Leerzeichen innerhalb enum '{' und '}' (ignore/add/remove/force)
sp_inside_braces_struct       = force  # Leerzeichen innerhalb struct/union '{' und '}' (ignore/add/remove/force)
sp_inside_braces              = remove # Leerzeichen innerhalb '{' und '}' (ignore/add/remove/force)
sp_inside_angle               = remove # Leerzeichen innerhalb '<' und '>' (ignore/add/remove/force)
sp_type_func                  = force  # Leerzeichen zwischen return type und function name (minimum 1 is forced außer für pointer return types) (ignore/add/remove/force)
sp_func_proto_paren           = remove # Leerzeichen zwischen function name und '(' bei Funktionsdeklaration (ignore/add/remove/force)
sp_func_def_paren             = remove # Leerzeichen zwischen function name und '(' bei Funktionsdefinition (ignore/add/remove/force)
sp_inside_fparens             = remove # Leerzeichen innerhalb leerer function '()' (ignore/add/remove/force)
sp_inside_fparen              = remove # Leerzeichen innerhalb Funktions '(' und ')' (ignore/add/remove/force)
sp_square_fparen              = force  # Leerzeichen zwischen ']' und '(', falls Teil eines Funktionsaufrufs. (ignore/add/remove/force)
sp_fparen_brace               = force  # Leerzeichen zwischen ')' und '{' einer Funktion (ignore/add/remove/force)
sp_func_call_paren            = remove # Leerzeichen zwischen Funktionsname und '(' bei Funktionsaufruf (ignore/add/remove/force)
sp_func_class_paren           = remove # Leerzeichen zwischen einem Konstruktor/Destruktor und '(' (ignore/add/remove/force)
sp_return_paren               = force  # Leerzeichen zwischen 'return' und '('  (ignore/add/remove/force)
sp_macro                      = ignore # Leerzeichen zwischen macro und Wert (ignore/add/remove/force)
sp_macro_func                 = ignore # Leerzeichen zwischen macro function ')' und Wert (ignore/add/remove/force)
sp_else_brace                 = force  # Leerzeichen zwischen 'else' und '{' wenn auf der gleichen Zeile (ignore/add/remove/force)
sp_brace_else                 = force  # Leerzeichen zwischen '}' und 'else' wenn auf der gleichen Zeile (ignore/add/remove/force)
#######################################################################
# Code Anordnung
#######################################################################
align_keep_tabs               = false  # Sollen nicht-einrückende Tabs behalten werden? false/true
align_with_tabs               = false  # Tabs zum Anordnen verwenden? false/true
align_on_tabstop              = false  # Whether to bump out to the next tab when Anordnen
align_number_left             = true   # Nummern links anordnen?
align_var_def_span            = 5      # span zur Anordnung Variablen Definitionen (0=don't align)
align_var_def_star_style      = 0      # ist pointer Stern '*' Teil des Variablennamen
align_var_def_thresh          = 12      # bis wieviel Zeichen sollen Variablen Definitionen ausgerichtet werden? (0=keine Begrenzung)
align_var_def_colon           = true   # soll Doppelpunkt in struct bit fields angeordnet werden?
align_var_def_inline          = true   # sollen inline struct/enum/union variable definitions angeordnet werden?
align_assign_span             = 1      # span für Anordnung am '=' in Zuweisungen (0=don't align)
align_assign_thresh           = 12     # Schwelle für Anordnen am '=' in Zuweisungen (0=no limit)
align_enum_equ_span           = 16     # span für Anordnen on '=' in enums (0=don't align)
align_enum_equ_thresh         = 0      # Schwelle für Anordnen on '=' in enums (0=no limit)
align_var_struct_span         = 99     # span für Anordnen struct/union (0=don't align)
align_struct_init_span        = 3      # span für Anordnen struct initializer values (0=don't align)
align_typedef_gap             = 3      # minimale Zahl Leerzeichen zwischen type und synonym eines typedef
align_typedef_span            = 5      # span für Anordnen single-line typedefs (0=don't align)
align_typedef_star_style      = 3      # positionierung des '*' in typedefs, 0 ignore '*', 1 '*' ist Teil Bezeichner, 3 Stern getrennt: int * pint
align_right_cmt_span          = 3      # span für Anordnen Kommentare die Zeilen beenden (0=don't align)
align_func_proto_span         = 1      # span für Anordnen Funktions Prototypen (0=don't align)
align_nl_cont                 = true   # mit Backslash und Zeilenumbruch umgebrochene Macros anordnen
align_pp_define_gap           = 4      # minimale Zahl Leerzeichen zwischen label und value of a preprocessor define
align_pp_define_span          = 3      # span für Anordnen on '#define' bodies (0=don't align)
#############################################################
# Zeilenumbruch Optionen
#############################################################
code_width                    = 0      # Limitierung auf max. N Spalten
nl_collapse_empty_body        = true   # leere Blöcke zwischen '{' und '}' zusammenfassen?
nl_start_of_file              = remove # Zeilenumbruch am Datei ANFANG hinzufügen/löschen?
nl_start_of_file_min          = 2      # Anzahl Leerzeilen am Dateianfang?
nl_end_of_file                = force  # Zeilenumbruch/Leerzeile am Datei ENDE hinzufügen/löschen? (ignore/add/remove/force)
nl_end_of_file_min            = 1      # Anzahl Leerzeilen am Datei ENDE?
nl_assign_brace               = remove # Zeilenumbruch zwischen '=' und '{' (ignore/add/remove/force)
nl_func_var_def_blk           = 1      # Anzahl Zeilenumbrueche nach einem block von variablen definitionen
nl_fcall_brace                = remove # Zeilenumbruch zwischen function call und '(' (ignore/add/remove/force)
nl_enum_brace                 = remove # Zeilenumbruch zwischen 'enum' und '{' (ignore/add/remove/force)
nl_struct_brace               = remove # Zeilenumbruch zwischen 'struct und '{' (ignore/add/remove/force)
nl_union_brace                = remove # Zeilenumbruch zwischen 'union' und '{' (ignore/add/remove/force)
nl_if_brace                   = remove # Zeilenumbruch zwischen 'if' und '{' (ignore/add/remove/force)
nl_brace_else                 = force  # Zeilenumbruch zwischen '}' und 'else' (ignore/add/remove/force)
nl_elseif_brace               = remove # Zeilenumbruch zwischen 'else if' und '{'. Falls ignore wird nl_if_brace benutzt (ignore/add/remove/force)
nl_else_brace                 = remove # Zeilenumbruch zwischen 'else' und '{' (ignore/add/remove/force)
nl_for_brace                  = remove # Zeilenumbruch zwischen 'for' und '{' (ignore/add/remove/force)
nl_while_brace                = remove # Zeilenumbruch zwischen 'while' und '{' (ignore/add/remove/force)
nl_do_brace                   = remove # Zeilenumbruch zwischen 'do' und '{' (ignore/add/remove/force)
nl_brace_while                = remove # Zeilenumbruch zwischen '}' und 'while' of 'do' statement (ignore/add/remove/force)
nl_switch_brace               = remove # Zeilenumbruch zwischen 'switch' und '{' (ignore/add/remove/force)
nl_before_case                = false  # Whether to put a Zeilenumbruch vor 'case' statement false/true
nl_after_case                 = false  # Whether to put a Zeilenumbruch after 'case' statement false/true
nl_namespace_brace            = remove # Zeilenumbruch zwischen namespace und { (ignore/add/remove/force)
nl_template_class             = remove # Zeilenumbruch zwischen 'template<>' und 'class' (ignore/add/remove/force)
nl_class_brace                = remove # Zeilenumbruch zwischen 'class' und '{' (ignore/add/remove/force)
nl_class_init_args            = ignore # Zeilenumbruch after each ',' in the constructor member initialization (ignore/add/remove/force)
nl_func_type_name             = remove # Zeilenumbruch zwischen return type und function name in definition (ignore/add/remove/force)
nl_func_decl_start            = remove # Zeilenumbruch after '(' in a function declaration (ignore/add/remove/force)
nl_func_decl_args             = remove # Zeilenumbruch after each ',' in a function declaration (ignore/add/remove/force)
nl_func_decl_end              = remove # (ignore/add/remove/force)
nl_fdef_brace                 = remove # Zeilenumbruch zwischen function signature und '{' (ignore/add/remove/force)
nl_after_return               = false  # Whether to put a Zeilenumbruch after 'return' statement false/true
nl_after_semicolon            = true   # Zeilenumbruch nach ';'  , außer in 'for' statements false/true
nl_after_brace_open           = false  # Zeilenumbruch nach '{'
nl_define_macro               = false  # Zeilenumbruch ändern in '#define' macros false/true
nl_squeeze_ifdef              = true   # keine Leerzeichen nach '#ifxx', '#elxx', oder vor '#endif'
#######################################################################
# Positionierung
#######################################################################
pos_bool                      = trail  # position boolscher operatoren in umgebrochenen expressions, ignore/lead/trail
pos_class_colon               = ignore # position Doppelpunkte zwischen constructor und member initialization, ignore/lead/trail
#######################################################################
# Leerzeilen
#######################################################################
nl_max                        = 2      # maximale Anzahl aufeindander folgender Zeilenumbrueche
nl_after_func_proto           = 0      # Anzahl Zeilenumbrueche nach function prototype, wenn gefolgt von anderem function prototype
nl_after_func_proto_group     = 0      # Anzahl Zeilenumbrueche nach function prototype, wenn NICHT gefolgt von anderem function prototype
nl_after_func_body            = 2      # Anzahl Zeilenumbrueche nach '}' eines function body
nl_before_block_comment       = 1      # minimale Anzahl Zeilenumbrueche vor mehrzeiligem Kommentar (nicht nach Klammer auf '{')
eat_blanks_after_open_brace   = true   # Leerzeilen nach '{' entfernen?  false/true
eat_blanks_before_close_brace = true   # Leerzeilen vor '}' entfernen?   false/true
#######################################################################
# Code modifying options (non-whitespace)
#######################################################################
mod_full_brace_do             = remove # '{' bei einzeiligem 'do' statement (ignore/add/remove/force)
mod_full_brace_for            = remove # '{' bei einzeiligem 'for' statement (ignore/add/remove/force)
mod_full_brace_function       = force  # '{' bei einzeiligen function defintions. (Pawn) (ignore/add/remove/force)
mod_full_brace_if             = add # '{' bei einzeiligem 'if' statement (ignore/add/remove/force)
mod_full_brace_nl             = 2      # keine '{' um N-zeilige statements entfernen Anzahl, Anzahl N
mod_full_brace_while          = remove # '{' bei einzeiligem 'while' statement (ignore/add/remove/force)
mod_paren_on_return           = add    # unnötige '(' bei 'return' statement (ignore/add/remove/force)
mod_pawn_semicolon            = false  # optionale ';' durch echte ';' tauschen, false/true
#######################################################################
# Kommentare aendern
#######################################################################
cmt_cpp_group                 = false  # Gruppierung von cpp-Kommentaren die aussehen wie ein Block, false/true
cmt_cpp_nl_start              = false  # leeres '/*' auf erste Zeile eines '/*' .. '*/' Kommentars setzen, false/true
cmt_cpp_nl_end                = true   # Zeilenumbruch vor schließendes '*/' eines mehrzeiligen '/*' .. '*/' Kommentars setzen. false/true
cmt_cpp_to_c                  = false  # '//' Kommentare in '/*' .. '*/' Kommentare konvertieren? false/true
cmt_star_cont                 = true   # ' *' am Anfang mehrzeiliger '/*' .. '*/' Kommentarzeilen einfügen? false/true
#############################################################
# Preprocessor options
#############################################################
pp_indent                     = remove # Einrückung Präprozessor Directiven, (ignore/add/remove/force)
pp_space                      = remove # Leerzeichen zwischen # und z.B. define, (ignore/add/remove/force)
