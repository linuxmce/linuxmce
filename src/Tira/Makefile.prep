#<-dceag-mh-b->
GENDEV=../Gen_Devices

SNR_CPPFLAGS ?= <-mkr_t_compile_defines->
SNR_LDFLAGS ?= <-mkr_t_compile_libs->

ROOT = ..

CXXFLAGS = -Wall -fPIC -ggdb3
CPPFLAGS = -I$(ROOT) -I$(ROOT)/DCE $(SNR_CPPFLAGS)
LDFLAGS = $(SNR_LDFLAGS) -L$(ROOT)/lib
BASELDLIBS = -lSerializeClass -lDCECommon -lPlutoUtils -lpthread

MYNAME = Tira
VERSION = 2.0.0
MYDEVTEMPLATEID = 1717mplateID

Gen_Dev_Files = $(GENDEV)/TiraBase.cpp
sources = Main.cpp Tira.cpp $(Gen_Dev_Files)
#<-dceag-mh-e->

CXXFLAGS +=
CPPFLAGS +=
LDFLAGS += -L.
XTRALDLIBS = -lMessageTranslation -lIRBase

ifneq (,$(findstring -DARCH64, $(CPPFLAGS)))
        TIRAAPI_SO = libTiraAPI_64b.so
else
        TIRAAPI_SO = libTiraAPI.so
endif

XTRALDLIBS += -lTiraAPI

Gen_Dev_Files +=
sources += ../LIRC_DCE/IRReceiverBase.cpp ToCCF.cpp

#<-dceag-mf-b->
LDLIBS = $(XTRALDLIBS) $(BASELDLIBS)

whattodo:
	@echo "type 'make bin', 'make so' or 'make all'"

all: bin so

bin: ../bin/Tira

so: ../lib/Tira.so

libTiraAPI.so: ../../proprietary_binaries/Tira/$(TIRAAPI_SO)
	cp ../../proprietary_binaries/Tira/$(TIRAAPI_SO) $@

../lib/libTiraAPI.so: libTiraAPI.so
	cp libTiraAPI.so $@

Tira.so: $(sources:.cpp=.o)
	$(CXX) -shared -o $(MYNAME).so $(call cpath,$+) $(LDFLAGS) $(LDLIBS)
	./post_make.sh $@

../lib/Tira.so: Tira.so
	cp Tira.so $@

Tira: $(sources:.cpp=.o) ../lib/libTiraAPI.so
	$(CXX) -o $(MYNAME) $(call cpath,$+) $(LDFLAGS) $(LDLIBS)
	./post_make.sh $@

../bin/Tira: Tira
	cp Tira $@

clean: clean-recursive
	rm -f $(call cpath,$(sources:.cpp=.o) $(sources:.cpp=.d)) >/dev/null
	rm -f Tira Tira.bin Tira.so libTiraAPI.so                 >/dev/null
	rm -f ../lib/libTiraAPI.so ../lib/Tira.so ../bin/Tira     >/dev/null

package:
	chmod +x make_package.sh
	./make_package.sh $(MYNAME) $(VERSION) $(MYDEVTEMPLATEID)

include $(ROOT)/PlutoUtils/make.rules
ifeq (,$(findstring clean, $(MAKECMDGOALS)))
-include $(sources:.cpp=.d)
endif
#<-dceag-mf-e->

