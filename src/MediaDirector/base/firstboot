#!/bin/bash

#set -e

[[ -e /usr/pluto/bin/Config_Ops.sh ]] && . /usr/pluto/bin/Config_Ops.sh

if ([ "$FirstBoot" = "false" ] && [ -n "$PK_Device" ]) ; then
	echo "Skipping firstboot, already completed."
	exit 0
fi

[[ -e /usr/pluto/bin/SQL_Ops.sh ]] && . /usr/pluto/bin/SQL_Ops.sh
[[ -e /usr/pluto/bin/Utils.sh ]] && . /usr/pluto/bin/Utils.sh

###########################################################
### Setup global variables
###########################################################

DEVICEDATA_DISTRO_Raspbian_Wheezy_CONST=19
DEVICEDATA_DISTRO_Ubuntu_Precise_CONST=20
DEVICEDATA_DISTRO_Ubuntu_Trusty_CONST=21

FSTAB_FILE="/etc/fstab"
DEVID_FILE="/etc/Disked_DeviceID"

#INSTALL_KUBUNTU_DESKTOP="yes"
INSTALL_KUBUNTU_DESKTOP="no"

TARGET_DISTRO=$(lsb_release -i -s | tr '[:upper:]' '[:lower:]')
TARGET_RELEASE=$(lsb_release -c -s)
TARGET_ARCH=$(apt-config dump | grep 'APT::Architecture' | sed 's/.*"\(.*\)".*/\1/g' | head -1)

DEB_CACHE="$TARGET_DISTRO-$TARGET_RELEASE-$TARGET_ARCH"

TARGET_KVER_LTS_HES=""
[[ "precise" == "$TARGET_RELEASE" ]] && TARGET_KVER_LTS_HES="-lts-trusty"
[[ "trusty" == "$TARGET_RELEASE" ]] && TARGET_KVER_LTS_HES="-lts-utopic"

case "$TARGET_ARCH" in
	i386|amd64)
		TARGET_REPO="http://archive.ubuntu.com/ubuntu/"
		;;
	armhf)
		TARGET_REPO="http://ports.ubuntu.com/"
		;;
esac

##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################

setup_fstab() {
	# Hmm, let's see if the mounts are here, if not add them
	check=$(grep 192.168.80.1 "${FSTAB_FILE}" || :)
	if [ -z "$check" ] ; then
		cat <<-EOF >> "${FSTAB_FILE}"
			192.168.80.1:/usr/pluto/var/    /usr/pluto/var/ nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/usr/pluto/orbiter /usr/pluto/orbiter      nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/usr/pluto/keys    /usr/pluto/keys nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/usr/pluto/deb-cache       /usr/pluto/deb-cache    nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/var/spool/asterisk/var/spool/asterisk     nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/home      /home   nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/home/cameras      /home/cameras   nfs4 retrans=10,timeo=50 1 1
			EOF
	fi

#       ## Create /var/log/pluto for this device as a symlink
#       mkdir -p "/home/logs/diskless_${Moon_DeviceID}"
#       if [[ -d $Moon_RootLocation/var/log/pluto       ]] ;then
#               mv $Moon_RootLocation/var/log/pluto/* /home/log/diskless_$Moon_DeviceID
#               rm -rf $Moon_RootLocation/var/log/pluto/
#       fi
#       if [[ ! -e "$Moon_RootLocation"/var/log/pluto ]]; then
#               ln -s "/home/logs/diskless_$Moon_DeviceID" "$Moon_RootLocation/var/log/pluto"
#       fi

	mkdir -p /usr/pluto/var/
	mkdir -p /usr/pluto/orbiter
	mkdir -p /usr/pluto/keys
	mkdir -p /usr/pluto/deb-cache
	mkdir -p /var/spool/asterisk
	mkdir -p /home/cameras
	mount -a || :
}

setup_plutoconf() {
	. /usr/pluto/bin/Config_Ops.sh

	# get PK_Device from "/etc/Disked_DeviceID", created by interactor
	DEVICE=$(cat "$DEVID_FILE")
	[ -n "$PK_Device" ] || ConfSet "PK_Device" "$DEVICE"

	# TODO: start_interactor already did this and put it in the DB
	# TODO: get the data from the DB instead?
	# get PK_Distro from OS
	DISTRO=$(lsb_release -cs)
	case "$DISTRO" in
		precise)
			distro=$DEVICEDATA_DISTRO_Ubuntu_Precise_CONST
	;;
		trusty)
			distro=$DEVICEDATA_DISTRO_Ubuntu_Trusty_CONST
			;;
		wheezy)
			distro=$DEVICEDATA_DISTRO_Raspbian_Wheezy_CONST
			;;
	esac
	[ -n "$PK_Distro" ] || [ -n "$distro" ] && ConfSet "PK_Distro" "$distro"

	[ -n "$MySqlHost" ] || ConfSet "MySqlHost" "192.168.80.1"
	[ -n "$MySqlUser" ] || ConfSet "MySqlUser" "root"
	[ -n "$MySqlPassword" ] || ConfSet "MySqlPassword" ""
	[ -n "$MySqlDBName" ] || ConfSet "MySqlDBName" "pluto_main"
	[ -n "$DCERouter" ] || ConfSet "DCERouter" "192.168.80.1"
	[ -n "$MySqlPort" ] || ConfSet "MySqlPort" "3306"
	[ -n "$DCERouterPort" ] || ConfSet "DCERouterPort" "3450"
	[ -n "$AutostartCore" ] || ConfSet "AutostartCore" "0"
	[ -n "$AutostartMedia" ] || ConfSet "AutostartMedia" "1"
	[ -n "$AVWizardDone" ] || ConfSet "AVWizardDone" "0"
}


##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################


###########################################################
### Setup Functions - Error checking and logging and trapping
###########################################################

VerifyExitCode () {
	local EXITCODE=$?
	if [ "$EXITCODE" != "0" ] ; then
		echo "An error (Exit code $EXITCODE) occured during the last action"
		echo "$1"
		exit 1
	fi
}

StatsMessage () {
	printf "$(date) - $* \n"
}

###########################################################
### Setup Functions - General functions
###########################################################

MD_System_Level_Prep () {
	StatsMessage "Setting up /etc/apt/sources.list"
	APT_CONFIG=$(grep "linuxmce" /etc/apt/sources.list)
	if [ -z "$APT_CONFIG" ] ; then
		TARGET_REPO_NAME="main"
		cat <<-EOF > /etc/apt/sources.list
			#deb http://10.10.42.99/$TARGET_RELEASE-$TARGET_ARCH/ ./
			deb file:/usr/pluto/deb-cache/$DEB_CACHE ./
			deb http://deb.linuxmce.org/ubuntu/ $TARGET_RELEASE $TARGET_REPO_NAME
			deb http://deb.linuxmce.org/ $TARGET_RELEASE $TARGET_REPO_NAME
			deb $TARGET_REPO $TARGET_RELEASE main restricted universe multiverse
			deb $TARGET_REPO $TARGET_RELEASE-updates main restricted universe multiverse
			deb http://security.ubuntu.com/ubuntu/ $TARGET_RELEASE-security main restricted universe multiverse
			EOF
	fi

	## Setup initial ssh access
	StatsMessage "Setting up SSH"
	[[ -f /usr/pluto/keys/id_dsa_pluto.pub ]] && mkdir -p /root/.ssh && cat /usr/pluto/keys/id_dsa_pluto.pub >> /root/.ssh/authorized_keys
}

MD_Seamless_Compatability () {
	: # no-op
}

MD_Preseed () {
	: # no-op
}

MD_Update () {
	StatsMessage "Setting up apt gpg keys"
	# This does an update, while adding gpg keys for any that are missing. This is primarily for vlc
	# but will work for any source.
	gpgs=$(apt-get -y update |& grep -s NO_PUBKEY | awk '{ print $NF }' | cut -c 9-16);
	if [ -n "$gpgs" ]; then
		echo "$gpgs" | while read gpgkeys ; do
			gpg --keyserver pgp.mit.edu --recv-keys "$gpgkeys"
			gpg --export --armor "$gpgkeys" | apt-key add -
		done
	fi

#	# TODO: remove, we just did an update ^^
#	apt-get -f -y -qq update
#	VerifyExitCode "apt update"

	StatsMessage "Setting up any packages that are un-configured"
	apt-get -f -y install

	StatsMessage "Installing initial LinuxMCE helper scripts"
	# FIXME: need to fix bootscripts, until then we need a couple util scripts
	apt-get -f -y install pluto-boot-scripts
}

MD_Install_Kernel () {
	StatsMessage "Installing kernel headers"
	. /usr/pluto/bin/Config_Ops.sh
	ConfSet "LTS_HES" "$TARGET_KVER_LTS_HES"

	case "$TARGET_ARCH" in
		i386|amd64)
			#Install headers and run depmod for the seamless integraton function, ensure no errors exist
			apt-get -f -y install linux-headers-generic"$TARGET_KVER_LTS_HES"
			VerifyExitCode "Install linux headers package failed"

			StatsMessage "Installing kernel"
			apt-get -f -y install linux-image-generic"$TARGET_KVER_LTS_HES"
			VerifyExitCode "Install linux kernel package failed"
			;;
		armhf)
			#FIXME: move to rpi firstboot addon
			apt-get -f -y install linux-headers-rpi2 || :
			VerifyExitCode "Install linux headers-rpi2 package failed" # will not occur due to || : above

			#FIXME: move to rpi firstboot addon? or md-rpi2 depends
			apt-get -f -y install linux-image-rpi2 || :
			VerifyExitCode "Install linux image-rpi2 package failed" # will not occur due to || : above
			;;
	esac

	TARGET_KVER=$(ls -vd /lib/modules/[0-9]* | sed 's/.*\///g' | tail -1)
	depmod -v "$TARGET_KVER"
	VerifyExitCode "depmod failed for $TARGET_KVER"
}

MD_Install_Packages () {
	StatsMessage "Performing a dist-upgrade"
	## Update the system
	apt-get -f -y dist-upgrade
	VerifyExitCode "Dist-upgrade failed"

	echo "en_US.UTF-8 UTF-8" >/etc/locale.gen

	StatsMessage "Installing LinuxMCE MD Packages"
	apt-get -f -y install lmce-md-meta locales nfs-common openssh-server pastebinit
	VerifyExitCode "Install pluto-confirm-dependencies, pluto-avwizard failed"

	if [[ "$INSTALL_KUBUNTU_DESKTOP" != "no" ]]; then
		StatsMessage "Installing kubuntu-desktop"
		apt-get -f -y --no-install-recommends install kubuntu-desktop
	fi

	StatsMessage "Disabling display managers"
	#FIXME: dpkg-divert it so it does not get over-written?
	echo '/bin/false' >/etc/X11/default-display-manager

	# Update startup to remove kdm and network manager
	update-rc.d -f lightdm remove
	update-rc.d -f kdm remove
	update-rc.d -f NetworkManager remove

	StatsMessage "Installing X"
	#Install ancillary programs
	apt-get -f -y install xserver-xorg"$TARGET_KVER_LTS_HES"
	VerifyExitCode "xserver-xorg$TARGET_KVER_LTS_HES install failed"
	apt-get -f -y install xserver-xorg-video-all"$TARGET_KVER_LTS_HES" linux-firmware
	VerifyExitCode "Ancillary programs install failed"

}

MD_Populate_Debcache () {
	# FIXME: is this the correct point here?
	mkdir -p /usr/pluto/deb-cache/$DEB_CACHE
#	find /var/cache/apt/archives/ -iname '*.deb' -exec mv {} /usr/pluto/deb-cache/$DEB_CACHE \;
#	/usr/pluto/bin/update-debcache.sh /usr/pluto/deb-cache/$DEB_CACHE
	:
}

MD_Cleanup () {
	StatsMessage "Cleaning up from package installations..."
	#Copy the orbiter activation command to the MD's desktop
	mkdir -p /root/Desktop
	cp -r /etc/skel/Desktop/* /root/Desktop

	#Remove the xorg file(s) from installation, need to start with a fresh slate
	rm -f /etc/X11/xorg.conf*

	#Clean up apt from the installs
	apt-get -f -y clean
	VerifyExitCode "APT Clean"

	#Create a list of installed packages
	#COLUMNS=1024 dpkg -l | awk '/^ii/ {print $2}' >/tmp/pkglist-diskless.txt # used for deb-cache cleanup in the builder
}

##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################
##########################################################################################################





start() {
	if [ ! -f "$DEVID_FILE" ]; then
		echo "ERR: interactor has not yet created '$DEVID_FILE'."
		return 10
	fi

	#TODO get as much of this from database as possible
	# run any device specific firstboot add-on scripts here
	for f in /etc/init.d/firstboot_lmce_* ; do
		echo "Running device specific script: $f_preinst"
		. "$f"
		$(basename "$f")_preinst
	done

	MD_System_Level_Prep
	#MD_Seamless_Compatability
	#MD_Preseed
	MD_Update
	setup_fstab
	setup_plutoconf
	MD_Install_Kernel
	MD_Install_Packages
	MD_Populate_Debcache
	MD_Cleanup

	# run any device specific firstboot add-on scripts here
	for f in /etc/init.d/firstboot_lmce_* ; do
		echo "Running device specific script: $f_postinst"
		. "$f"
		$(basename "$f")_postinst
	done

	ConfSet "FirstBoot" "false"
	reboot
	return 0
}

status() {
	status_of_proc firstboot firstboot
	return $?
}

case "$1" in
	start|"")
		$1
		retval=$?
		;;
	restart|reload|force-reload)
		echo "Error: argument '$1' not supported" >&2
		retval=3
		;;
	stop)
		: # No-op
		retval=$?
		;;
	status)
		$1
		retval=$?
		;;
	*)
		echo "Usage: $0 [start|stop|status]" >&2
		retval=3
esac
exit $retval

